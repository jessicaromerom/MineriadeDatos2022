---
title: "Taller3_JessicaRomero"
author: "Jessica Romero"
format: html
editor: visual
---

## Taller 3

Ejercicios de {readr}, {tidyr} y {dplyr}.

```{r}
library(readr)
library(tidyr)
library(dplyr)

meta_agromet <- readRDS("../Taller_JessicaRomero/data/data_raw/metadata_estaciones_agrometAPI.rds")
meta_agv <- readRDS("../Taller_JessicaRomero/data/data_raw/metadata_estaciones_agvAPI(1).rds")
station_agromet_jessica <- readRDS("../Taller_JessicaRomero/data/data_raw/station_id_agromet_Jesica.rds")
station_agv_jessica <- readRDS("../Taller_JessicaRomero/data/data_raw/station_id_agv_Jesica.rds")
data_estaciones_agvAPI <- readRDS("../Taller_JessicaRomero/data/data_raw/data_agvAPI.rds")
data_estaciones_agrometAPI <- readRDS("../Taller_JessicaRomero/data/data_raw/data_estaciones_agrometAPI.rds")


meta_agromet_jess <- meta_agromet[meta_agromet$ema %in% station_agromet_jessica,]
meta_agv_jess <- meta_agv[meta_agv$serial %in% station_agv_jessica,]


data_agromet_jess <- data_estaciones_agrometAPI[data_estaciones_agrometAPI$station_id %in% station_agromet_jessica,]

data_agro <- data_estaciones_agrometAPI
```

## Parte 1 Ejercicios {readr} y {tidyr}

1.  con los datos de `agromet` cree datos anidados por estación (station_id) considerando todas las variables climáticas

```{r}
    data_nest <- data_agromet_jess |>
      nest(data=2:13)
    data_nest |> glimpse()
```

2.  de la data anidada extraiga el primer valor de la variable humedad relativa de la estación que se encuetra en la posición 5.

```{r}
data_nest |>
  slice(5) |>
  hoist(data, "humed_rel_promedio") |>
  select(1:2) |>
  unnest('humed_rel_promedio') |>
  slice(1)
```

3.  agregue la variable precipitación extraida de la columna anidada como una variable adicional
4.  aplane (desanide) la variable de precipitación anterior.

```{r}
data_nest |> 
  hoist(data, hoisted_col ='precipitacion_horaria') |>
  unnest(hoisted_col) |> 
  #4
  select(-data)
```

5.  Haga explicitos los valores NA implicitos de precipitación. Comparé la cantidad de observaciones con la data original

```{r}
data_agro |>
  select(station_id, fecha_hora, precipitacion_horaria) |>
  complete(fecha_hora, station_id) |>
  glimpse()

```

6.  relicé el rellenado de los valores NA de precipitación horaria tomando el valor anterior.

```{r}
data_agro |>
  fill(precipitacion_horaria, .direction = "down")


```

## Parte 2 Ejercicios {dplyr} (parte 1)

1.  Filtrar con los datos de agromet para las estaciones asignadas (inicio)

2.  Filtrar los datos para los meses de Mayo a Julio en las estaciones asignadas.

```{r}
library(lubridate)
data_agromet_jess |>
  mutate(fecha_hora = as_date(fecha_hora)) |>
  filter(fecha_hora >= ymd(20210501) & fecha_hora < ymd (20210801)) |>
  summarize(range(fecha_hora))

```

3.  tome una muestra de 1000 filas de forma aleatoria sin reemplazo.

```{r}
data_agromet_jess |> 
  slice_sample(n=1000)

```

4.  Para cada estación seleccione los valores máximos de precipitación horaria.

```{r}
data_agromet_jess |> 
  group_by(station_id) |>
  slice_max(precipitacion_horaria,n=100) 

```

5.  Seleccione las columnas que tienen temperatura, además de station_id y fecha_hora

```{r}
data_agromet_jess |>
  select(station_id, fecha_hora, contains("temp"))|>
  glimpse()
```

6.  Seleccione las columnas que tienen valores no numéricos.

```{r}
data_agromet_jess %>%  
  select_if(., ~ !is.numeric(.))
```

## Parte 3 Ejercicios {dplyr} (parte 2)

1.  Agrupe los datos de las climáticos de agromet por estación (group_by)

```{r}
data_agro |> 
  group_by(station_id)
```

2.  Haga un sumarizado de promedio mensual de las variables de temperatura para cada estación (group_by, summarize y across)

```{r}
data_agro_prom <-
data_agro |> 
  group_by(station_id) |>
  summarise(across(contains("temp"),\(x) mean( x, na.rm = T), .names = "{.col}_avg"))

data_agro_prom

```

3.  Renombre y reordene las variables como temp_prom, temp_max y Temp_min (rename_with y \`relocate\`\`)

```{r}
data_agro_prom_names <- data_agro_prom |> 
  rename_with(contains("temp"),.fn = \(x) substr(x, start =1,stop =8))

data_agro_prom_names

data_agro_prom_names |>
  relocate(temp_max, .after = temp_pro) |>
  relocate(temp_min, .after = last_col())

```

4.Cree las columnas var_temp y temp, en formato largo que contenga las variables de temp_prom, temp_max y Temp_min y sus valores. (pivot_longer)

5.  Ordene los datos anteriores de mayor a menor.

```{r}
data_pivot_longer <- data_agro_prom_names|>
  pivot_longer(2:4, names_to = 'var_temp', values_to = 'temp',) |>
#5
  arrange(desc(temp))
```

6.  Vuelva a formato ancho los datos del punto anterior.

```{r}
data_pivot_wider <- data_pivot_longer |>
  pivot_wider(names_from = var_temp, values_from = temp)  

```

7.  Caclule cuantos datos no faltantes (!is.na) tiene cada estacion para cada una de las variables.

```{r}
data_agro |>
  select(station_id, contains('temp')) |>
  pivot_longer(2:4, names_to = 'var_temp', values_to = 'temp',) |>
  group_by(station_id, var_temp) |>
  summarize(nas = sum(is.na(temp)))|>
  glimpse()
```

## Parte 4 Ejercicios {dplyr} (parte 3)

1.  Con los datos de agromet, calcule el promedio de temperatura (media, máxima, mínima) por día y estación. Utilice summarize y across.

```{r}
data_agro_prom_4 <-
  data_agro |>
  group_by(fecha_hora, station_id) |>
  summarise(across(contains("temp"),\(x) mean( x, na.rm = T), .names = "{.col}_avg"))
data_agro_prom_4
```

2.  Para cada estacion calcule el valor de la mediana.

```{r}
data_agro_prom_4 |>
  group_by(station_id) |>
  summarise(across(everything(),\(x) mean( x, na.rm = T)))

```

4.  Verifique que los nombres de la estaciones son únicos (distinct).

```{r}
data_agro_prom_4|>
  distinct(station_id)
```
